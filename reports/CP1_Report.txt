Checkpoint 1 Report:
Group: Elec E Money Gang
NetID: delanos2, thomasn2, pandoh2

In Checkpoint 1, we implemented a basic pipelined datapath that handles ADD,
AND, NOT, LDR, STR, and BR. In accordance with the 5 stages of pipelining, we
split up the datapath into functional blocks called instruction_fetch,
instruction_decode, execution_module, memory_module, and writeback_module. In
between these pipeline stages we had storage latches for the control word to
propagate through. Finally, we added a control rom to decode instructions
and output a control word to be passed down the pipeline.
For this checkpoint, we used a dual port magic memory to
interface with the pipeline in the testbench and didn't have to worry about
stalls in the pipeline.

Our testing strategy was to test each individual functional block by forcing
signals and seeing the corresponding behavior. This was harder for some of the
blocks, but we managed to at least verify some behavior with these tests.
Once we got the pipeline up and running, we tested each instruction before
moving to the next one. After each instruction, we accumulated the test code
to make a more comprehensive test. Once the design passed our test code and
the test code given, we were confident that our design met specifications.

In terms of workflow, each of us worked on a functional block and storage latch.
We tested them ourselves and begun to hook them together. Once the pipeline was
built, two of us worked on the control rom while the other worked on setting up
the testbench and hooking up the dual port magic memory. After everything was
set up, we started debugging the system as a whole. To do this, one of us
looked at simulation waveforms to identify bugs while the other two looked
through RTL and the code to find the source of the bug. This system worked
quite well as the person looking at waveforms continued to give more
information about the bug to help the others narrow their search for the source.
